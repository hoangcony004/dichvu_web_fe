//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase, HttpContext } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IDichVuWeb_Service {
    /**
     * @return OK
     */
    apiLogout(body: string): Observable<ApiResponseObject>;
    /**
     * @return OK
     */
    apiLogin(body: LoginRequestDTO): Observable<ApiResponseTokenResponse>;
    /**
     * @return OK
     */
    publicApiHello(): Observable<string>;
}

@Injectable({
    providedIn: 'root'
})
export class DichVuWeb_Service implements IDichVuWeb_Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:6868";
    }

    /**
     * @return OK
     */
    apiLogout(body: string, httpContext?: HttpContext): Observable<ApiResponseObject> {
        let url_ = this.baseUrl + "/api/logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseObject>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseObject>;
        }));
    }

    protected processApiLogout(response: HttpResponseBase): Observable<ApiResponseObject> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    apiLogin(body: LoginRequestDTO, httpContext?: HttpContext): Observable<ApiResponseTokenResponse> {
        let url_ = this.baseUrl + "/api/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseTokenResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseTokenResponse>;
        }));
    }

    protected processApiLogin(response: HttpResponseBase): Observable<ApiResponseTokenResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseTokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    publicApiHello(httpContext?: HttpContext): Observable<string> {
        let url_ = this.baseUrl + "/public/api/hello";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublicApiHello(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublicApiHello(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processPublicApiHello(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ApiResponseObject implements IApiResponseObject {
    status?: ApiResponseObjectStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;

    constructor(data?: IApiResponseObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ApiResponseObject {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data;
        return data;
    }

    clone(): ApiResponseObject {
        const json = this.toJSON();
        let result = new ApiResponseObject();
        result.init(json);
        return result;
    }
}

export interface IApiResponseObject {
    status?: ApiResponseObjectStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;
}

export class LoginRequestDTO implements ILoginRequestDTO {
    username?: string;
    password?: string;

    [key: string]: any;

    constructor(data?: ILoginRequestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }

    clone(): LoginRequestDTO {
        const json = this.toJSON();
        let result = new LoginRequestDTO();
        result.init(json);
        return result;
    }
}

export interface ILoginRequestDTO {
    username?: string;
    password?: string;

    [key: string]: any;
}

export class ApiResponseTokenResponse implements IApiResponseTokenResponse {
    status?: ApiResponseTokenResponseStatus;
    message?: string;
    code?: number;
    data?: TokenResponse;

    [key: string]: any;

    constructor(data?: IApiResponseTokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new TokenResponse(data.data) : <TokenResponse>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"] ? TokenResponse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseTokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseTokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApiResponseTokenResponse {
        const json = this.toJSON();
        let result = new ApiResponseTokenResponse();
        result.init(json);
        return result;
    }
}

export interface IApiResponseTokenResponse {
    status?: ApiResponseTokenResponseStatus;
    message?: string;
    code?: number;
    data?: ITokenResponse;

    [key: string]: any;
}

export class SysUserDTO implements ISysUserDTO {
    id?: number;
    fullname?: string;
    username?: string;
    email?: string;
    phone?: string;
    gender?: number;
    address?: string;
    avatarUrl?: string;
    status?: number;
    unitcode?: string;
    createdAt?: Date;
    updatedAt?: Date;

    [key: string]: any;

    constructor(data?: ISysUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.fullname = _data["fullname"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.gender = _data["gender"];
            this.address = _data["address"];
            this.avatarUrl = _data["avatarUrl"];
            this.status = _data["status"];
            this.unitcode = _data["unitcode"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["fullname"] = this.fullname;
        data["username"] = this.username;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["gender"] = this.gender;
        data["address"] = this.address;
        data["avatarUrl"] = this.avatarUrl;
        data["status"] = this.status;
        data["unitcode"] = this.unitcode;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }

    clone(): SysUserDTO {
        const json = this.toJSON();
        let result = new SysUserDTO();
        result.init(json);
        return result;
    }
}

export interface ISysUserDTO {
    id?: number;
    fullname?: string;
    username?: string;
    email?: string;
    phone?: string;
    gender?: number;
    address?: string;
    avatarUrl?: string;
    status?: number;
    unitcode?: string;
    createdAt?: Date;
    updatedAt?: Date;

    [key: string]: any;
}

export class TokenResponse implements ITokenResponse {
    token?: string;
    user?: SysUserDTO;

    [key: string]: any;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.user = data.user && !(<any>data.user).toJSON ? new SysUserDTO(data.user) : <SysUserDTO>this.user;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.token = _data["token"];
            this.user = _data["user"] ? SysUserDTO.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["token"] = this.token;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }

    clone(): TokenResponse {
        const json = this.toJSON();
        let result = new TokenResponse();
        result.init(json);
        return result;
    }
}

export interface ITokenResponse {
    token?: string;
    user?: ISysUserDTO;

    [key: string]: any;
}

export enum ApiResponseObjectStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export enum ApiResponseTokenResponseStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}