//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase, HttpContext } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IDichVuWeb_Service {
    /**
     * Chỉnh sửa
     * @return Chỉnh sửa thành công
     */
    apiPrivateUsersUpdate(id: number, body: SysUser): Observable<ApiResponseCustom>;
    /**
     * Lấy danh sách có phân trang
     * @return Lấy danh sách thành công
     */
    apiPrivateUsersSearchPaging(body: PageModel): Observable<ApiResponseCustomPagedResultSysUser>;
    /**
     * Lấy danh sách SysUser có phân trang + tìm kiếm custom
     * @return Lấy danh sách thành công
     */
    apiPrivateUsersSearchPagingCustom(body: UserPageModelCustom): Observable<ApiResponseCustomPagedResultSysUser>;
    /**
     * Tạo mới
     * @return Tạo mới thành công
     */
    apiPrivateUsersInsert(body: SysUser): Observable<ApiResponseCustom>;
    /**
     * Lấy dữ liệu theo cột
     * @return Lấy dữ liệu thành công
     */
    apiPrivateUsersGetDataByColumn(body: { [key: string]: string; }): Observable<ApiResponseCustom>;
    /**
     * @return OK
     */
    apiLogout(body: string): Observable<ApiResponseCustomObject>;
    /**
     * @return OK
     */
    apiLogin(body: LoginRequestDTO): Observable<ApiResponseCustomTokenResponse>;
    /**
     * @return OK
     */
    apiAuthRefreshToken(): Observable<FileResponse>;
    /**
     * @return OK
     */
    publicApiHello(): Observable<string>;
    /**
     * Lấy thông tin theo ID
     * @return Lấy thông tin thành công
     */
    apiPrivateUsersGetOne(id: number): Observable<ApiResponseCustom>;
    /**
     * Xóa bản ghi
     * @return Xóa thành công
     */
    apiPrivateUsersDelete(id: number): Observable<ApiResponseCustom>;
}

@Injectable({
    providedIn: 'root'
})
export class DichVuWeb_Service implements IDichVuWeb_Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:6868";
    }

    /**
     * Chỉnh sửa
     * @return Chỉnh sửa thành công
     */
    apiPrivateUsersUpdate(id: number, body: SysUser, httpContext?: HttpContext): Observable<ApiResponseCustom> {
        let url_ = this.baseUrl + "/api/private/users/update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustom>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustom>;
        }));
    }

    protected processApiPrivateUsersUpdate(response: HttpResponseBase): Observable<ApiResponseCustom> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseCustom.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ApiResponseCustom.fromJS(resultData500);
            return throwException("L\u1ed7i server", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Lấy danh sách có phân trang
     * @return Lấy danh sách thành công
     */
    apiPrivateUsersSearchPaging(body: PageModel, httpContext?: HttpContext): Observable<ApiResponseCustomPagedResultSysUser> {
        let url_ = this.baseUrl + "/api/private/users/search-paging";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersSearchPaging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersSearchPaging(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustomPagedResultSysUser>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustomPagedResultSysUser>;
        }));
    }

    protected processApiPrivateUsersSearchPaging(response: HttpResponseBase): Observable<ApiResponseCustomPagedResultSysUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseCustomPagedResultSysUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ApiResponseCustom.fromJS(resultData500);
            return throwException("L\u1ed7i server", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Lấy danh sách SysUser có phân trang + tìm kiếm custom
     * @return Lấy danh sách thành công
     */
    apiPrivateUsersSearchPagingCustom(body: UserPageModelCustom, httpContext?: HttpContext): Observable<ApiResponseCustomPagedResultSysUser> {
        let url_ = this.baseUrl + "/api/private/users/search-paging-custom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersSearchPagingCustom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersSearchPagingCustom(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustomPagedResultSysUser>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustomPagedResultSysUser>;
        }));
    }

    protected processApiPrivateUsersSearchPagingCustom(response: HttpResponseBase): Observable<ApiResponseCustomPagedResultSysUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseCustomPagedResultSysUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ApiResponseCustom.fromJS(resultData500);
            return throwException("L\u1ed7i server", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Tạo mới
     * @return Tạo mới thành công
     */
    apiPrivateUsersInsert(body: SysUser, httpContext?: HttpContext): Observable<ApiResponseCustom> {
        let url_ = this.baseUrl + "/api/private/users/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersInsert(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustom>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustom>;
        }));
    }

    protected processApiPrivateUsersInsert(response: HttpResponseBase): Observable<ApiResponseCustom> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ApiResponseCustom.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ApiResponseCustom.fromJS(resultData500);
            return throwException("L\u1ed7i server", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Lấy dữ liệu theo cột
     * @return Lấy dữ liệu thành công
     */
    apiPrivateUsersGetDataByColumn(body: { [key: string]: string; }, httpContext?: HttpContext): Observable<ApiResponseCustom> {
        let url_ = this.baseUrl + "/api/private/users/get-data-by-column";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersGetDataByColumn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersGetDataByColumn(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustom>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustom>;
        }));
    }

    protected processApiPrivateUsersGetDataByColumn(response: HttpResponseBase): Observable<ApiResponseCustom> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseCustom.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ApiResponseCustom.fromJS(resultData500);
            return throwException("L\u1ed7i server", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    apiLogout(body: string, httpContext?: HttpContext): Observable<ApiResponseCustomObject> {
        let url_ = this.baseUrl + "/api/logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustomObject>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustomObject>;
        }));
    }

    protected processApiLogout(response: HttpResponseBase): Observable<ApiResponseCustomObject> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseCustomObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    apiLogin(body: LoginRequestDTO, httpContext?: HttpContext): Observable<ApiResponseCustomTokenResponse> {
        let url_ = this.baseUrl + "/api/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            withCredentials: true, 
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustomTokenResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustomTokenResponse>;
        }));
    }

    protected processApiLogin(response: HttpResponseBase): Observable<ApiResponseCustomTokenResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseCustomTokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    apiAuthRefreshToken(httpContext?: HttpContext): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/auth/refresh-token";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            withCredentials: true, 
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiAuthRefreshToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAuthRefreshToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processApiAuthRefreshToken(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    publicApiHello(httpContext?: HttpContext): Observable<string> {
        let url_ = this.baseUrl + "/public/api/hello";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublicApiHello(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublicApiHello(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processPublicApiHello(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Lấy thông tin theo ID
     * @return Lấy thông tin thành công
     */
    apiPrivateUsersGetOne(id: number, httpContext?: HttpContext): Observable<ApiResponseCustom> {
        let url_ = this.baseUrl + "/api/private/users/getOne/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersGetOne(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersGetOne(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustom>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustom>;
        }));
    }

    protected processApiPrivateUsersGetOne(response: HttpResponseBase): Observable<ApiResponseCustom> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseCustom.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ApiResponseCustom.fromJS(resultData500);
            return throwException("L\u1ed7i server", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Xóa bản ghi
     * @return Xóa thành công
     */
    apiPrivateUsersDelete(id: number, httpContext?: HttpContext): Observable<ApiResponseCustom> {
        let url_ = this.baseUrl + "/api/private/users/delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseCustom>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseCustom>;
        }));
    }

    protected processApiPrivateUsersDelete(response: HttpResponseBase): Observable<ApiResponseCustom> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseCustom.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ApiResponseCustom.fromJS(resultData500);
            return throwException("L\u1ed7i server", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class SysUser implements ISysUser {
    id?: number;
    unitcode?: string;
    createdAt?: Date;
    updatedAt?: Date;
    fullname?: string;
    username?: string;
    password?: string;
    email?: string;
    phone?: string;
    gender?: number;
    address?: string;
    avatarUrl?: string;
    status?: number;

    [key: string]: any;

    constructor(data?: ISysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.unitcode = _data["unitcode"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.fullname = _data["fullname"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.gender = _data["gender"];
            this.address = _data["address"];
            this.avatarUrl = _data["avatarUrl"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): SysUser {
        data = typeof data === 'object' ? data : {};
        let result = new SysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["unitcode"] = this.unitcode;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["fullname"] = this.fullname;
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["gender"] = this.gender;
        data["address"] = this.address;
        data["avatarUrl"] = this.avatarUrl;
        data["status"] = this.status;
        return data;
    }

    clone(): SysUser {
        const json = this.toJSON();
        let result = new SysUser();
        result.init(json);
        return result;
    }
}

export interface ISysUser {
    id?: number;
    unitcode?: string;
    createdAt?: Date;
    updatedAt?: Date;
    fullname?: string;
    username?: string;
    password?: string;
    email?: string;
    phone?: string;
    gender?: number;
    address?: string;
    avatarUrl?: string;
    status?: number;

    [key: string]: any;
}

export class ApiResponseCustom implements IApiResponseCustom {
    status?: ApiResponseCustomStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;

    constructor(data?: IApiResponseCustom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ApiResponseCustom {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseCustom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data;
        return data;
    }

    clone(): ApiResponseCustom {
        const json = this.toJSON();
        let result = new ApiResponseCustom();
        result.init(json);
        return result;
    }
}

export interface IApiResponseCustom {
    status?: ApiResponseCustomStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;
}

export class PageModel implements IPageModel {
    currentPage?: number;
    pageSize?: number;
    strKey?: string;

    [key: string]: any;

    constructor(data?: IPageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.currentPage = _data["currentPage"];
            this.pageSize = _data["pageSize"];
            this.strKey = _data["strKey"];
        }
    }

    static fromJS(data: any): PageModel {
        data = typeof data === 'object' ? data : {};
        let result = new PageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["currentPage"] = this.currentPage;
        data["pageSize"] = this.pageSize;
        data["strKey"] = this.strKey;
        return data;
    }

    clone(): PageModel {
        const json = this.toJSON();
        let result = new PageModel();
        result.init(json);
        return result;
    }
}

export interface IPageModel {
    currentPage?: number;
    pageSize?: number;
    strKey?: string;

    [key: string]: any;
}

export class ApiResponseCustomPagedResultSysUser implements IApiResponseCustomPagedResultSysUser {
    status?: ApiResponseCustomPagedResultSysUserStatus;
    message?: string;
    code?: number;
    data?: PagedResultSysUser;

    [key: string]: any;

    constructor(data?: IApiResponseCustomPagedResultSysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new PagedResultSysUser(data.data) : <PagedResultSysUser>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"] ? PagedResultSysUser.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseCustomPagedResultSysUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseCustomPagedResultSysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApiResponseCustomPagedResultSysUser {
        const json = this.toJSON();
        let result = new ApiResponseCustomPagedResultSysUser();
        result.init(json);
        return result;
    }
}

export interface IApiResponseCustomPagedResultSysUser {
    status?: ApiResponseCustomPagedResultSysUserStatus;
    message?: string;
    code?: number;
    data?: IPagedResultSysUser;

    [key: string]: any;
}

export class PagedResultSysUser implements IPagedResultSysUser {
    currentPage?: number;
    totalPages?: number;
    totalElements?: number;
    pageSize?: number;
    strKey?: string;
    data?: SysUser[];

    [key: string]: any;

    constructor(data?: IPagedResultSysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new SysUser(item) : <SysUser>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.currentPage = _data["currentPage"];
            this.totalPages = _data["totalPages"];
            this.totalElements = _data["totalElements"];
            this.pageSize = _data["pageSize"];
            this.strKey = _data["strKey"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUser.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultSysUser {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultSysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["currentPage"] = this.currentPage;
        data["totalPages"] = this.totalPages;
        data["totalElements"] = this.totalElements;
        data["pageSize"] = this.pageSize;
        data["strKey"] = this.strKey;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }

    clone(): PagedResultSysUser {
        const json = this.toJSON();
        let result = new PagedResultSysUser();
        result.init(json);
        return result;
    }
}

export interface IPagedResultSysUser {
    currentPage?: number;
    totalPages?: number;
    totalElements?: number;
    pageSize?: number;
    strKey?: string;
    data?: ISysUser[];

    [key: string]: any;
}

export class UserPageModelCustom implements IUserPageModelCustom {
    currentPage?: number;
    pageSize?: number;
    strKey?: string;
    role?: string;

    [key: string]: any;

    constructor(data?: IUserPageModelCustom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.currentPage = _data["currentPage"];
            this.pageSize = _data["pageSize"];
            this.strKey = _data["strKey"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): UserPageModelCustom {
        data = typeof data === 'object' ? data : {};
        let result = new UserPageModelCustom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["currentPage"] = this.currentPage;
        data["pageSize"] = this.pageSize;
        data["strKey"] = this.strKey;
        data["role"] = this.role;
        return data;
    }

    clone(): UserPageModelCustom {
        const json = this.toJSON();
        let result = new UserPageModelCustom();
        result.init(json);
        return result;
    }
}

export interface IUserPageModelCustom {
    currentPage?: number;
    pageSize?: number;
    strKey?: string;
    role?: string;

    [key: string]: any;
}

export class ApiResponseCustomObject implements IApiResponseCustomObject {
    status?: ApiResponseCustomObjectStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;

    constructor(data?: IApiResponseCustomObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ApiResponseCustomObject {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseCustomObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data;
        return data;
    }

    clone(): ApiResponseCustomObject {
        const json = this.toJSON();
        let result = new ApiResponseCustomObject();
        result.init(json);
        return result;
    }
}

export interface IApiResponseCustomObject {
    status?: ApiResponseCustomObjectStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;
}

export class LoginRequestDTO implements ILoginRequestDTO {
    username?: string;
    password?: string;

    [key: string]: any;

    constructor(data?: ILoginRequestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }

    clone(): LoginRequestDTO {
        const json = this.toJSON();
        let result = new LoginRequestDTO();
        result.init(json);
        return result;
    }
}

export interface ILoginRequestDTO {
    username?: string;
    password?: string;

    [key: string]: any;
}

export class ApiResponseCustomTokenResponse implements IApiResponseCustomTokenResponse {
    status?: ApiResponseCustomTokenResponseStatus;
    message?: string;
    code?: number;
    data?: TokenResponse;

    [key: string]: any;

    constructor(data?: IApiResponseCustomTokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new TokenResponse(data.data) : <TokenResponse>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"] ? TokenResponse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseCustomTokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseCustomTokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApiResponseCustomTokenResponse {
        const json = this.toJSON();
        let result = new ApiResponseCustomTokenResponse();
        result.init(json);
        return result;
    }
}

export interface IApiResponseCustomTokenResponse {
    status?: ApiResponseCustomTokenResponseStatus;
    message?: string;
    code?: number;
    data?: ITokenResponse;

    [key: string]: any;
}

export class SysUserDTO implements ISysUserDTO {
    id?: number;
    fullname?: string;
    username?: string;
    email?: string;
    phone?: string;
    gender?: number;
    address?: string;
    avatarUrl?: string;
    status?: number;
    unitcode?: string;
    createdAt?: Date;
    updatedAt?: Date;

    [key: string]: any;

    constructor(data?: ISysUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.fullname = _data["fullname"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.gender = _data["gender"];
            this.address = _data["address"];
            this.avatarUrl = _data["avatarUrl"];
            this.status = _data["status"];
            this.unitcode = _data["unitcode"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["fullname"] = this.fullname;
        data["username"] = this.username;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["gender"] = this.gender;
        data["address"] = this.address;
        data["avatarUrl"] = this.avatarUrl;
        data["status"] = this.status;
        data["unitcode"] = this.unitcode;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }

    clone(): SysUserDTO {
        const json = this.toJSON();
        let result = new SysUserDTO();
        result.init(json);
        return result;
    }
}

export interface ISysUserDTO {
    id?: number;
    fullname?: string;
    username?: string;
    email?: string;
    phone?: string;
    gender?: number;
    address?: string;
    avatarUrl?: string;
    status?: number;
    unitcode?: string;
    createdAt?: Date;
    updatedAt?: Date;

    [key: string]: any;
}

export class TokenResponse implements ITokenResponse {
    user?: SysUserDTO;
    accessToken?: string;

    [key: string]: any;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.user = data.user && !(<any>data.user).toJSON ? new SysUserDTO(data.user) : <SysUserDTO>this.user;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.user = _data["user"] ? SysUserDTO.fromJS(_data["user"]) : <any>undefined;
            this.accessToken = _data["accessToken"];
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["accessToken"] = this.accessToken;
        return data;
    }

    clone(): TokenResponse {
        const json = this.toJSON();
        let result = new TokenResponse();
        result.init(json);
        return result;
    }
}

export interface ITokenResponse {
    user?: ISysUserDTO;
    accessToken?: string;

    [key: string]: any;
}

export enum ApiResponseCustomStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export enum ApiResponseCustomPagedResultSysUserStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export enum ApiResponseCustomObjectStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export enum ApiResponseCustomTokenResponseStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}